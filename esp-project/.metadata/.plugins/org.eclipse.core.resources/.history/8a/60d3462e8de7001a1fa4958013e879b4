/*
 * app_gpio.c
 *
 *  Created on: 19 aoÃ»t 2020
 *      Author: raki
 */
#include "string.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "driver/ledc.h"
#include "sdkconfig.h"
#include "cJSON.h"
#include "esp_system.h"
#include "esp_event.h"
#include "esp_event_loop.h"
#include "nvs_flash.h"
#include "freertos/portmacro.h"
#include "freertos/event_groups.h"
#include "esp_log.h"

#include "main.h"

int cntrl_pins[4] = { 27, 26, 25, 33 };

#define delay(ms) (vTaskDelay(ms/portTICK_RATE_MS))

#define PIR_GPIO  16

char *json_unformatted;

char* GPIO_TAG = "app_gpio";

#define RelayStateOFF 0
#define RelayStateON 1

#define UVRelay 0
#define RedLightRelay 1
#define GreenLightRelay 2
#define BuzzerRelay 3

bool uvcTreatementIsON = false;

uint16_t phaseTimeStep = 0;
int32_t phaseTime = 0;

void TreatementTime() {
	if (UnitCfg.DisinfictionTime == 0) {
		phaseTime = 30;
	}
	if (UnitCfg.DisinfictionTime == 1) {
		phaseTime = 60;
	}
	if (UnitCfg.DisinfictionTime == 2) {
		phaseTime = 120;
	}
	if (UnitCfg.DisinfictionTime == 3) {
		phaseTime = 300;
	}
	if (UnitCfg.DisinfictionTime == 4) {
		phaseTime = 600;
	}
	if (UnitCfg.DisinfictionTime == 5) {
		phaseTime = 900;
	}
	if (UnitCfg.DisinfictionTime == 6) {
		phaseTime = 1200;
	}
	if (UnitCfg.DisinfictionTime == 7) {
		phaseTime = 1500;
	}
	if (UnitCfg.DisinfictionTime == 8) {
		phaseTime = 1800;
	}
	if (UnitCfg.DisinfictionTime == 9) {
		phaseTime = 2100;
	}
	if (UnitCfg.DisinfictionTime == 10) {
		phaseTime = 2400;
	}
	if (UnitCfg.DisinfictionTime == 11) {
		phaseTime = 2700;
	}
	if (UnitCfg.DisinfictionTime == 12) {
		phaseTime = 3000;
	}
	if (UnitCfg.DisinfictionTime == 13) {
		phaseTime = 3300;
	}
	if (UnitCfg.DisinfictionTime == 14) {
		phaseTime = 3600;
	}
	if (UnitCfg.DisinfictionTime == 15) {
		phaseTime = 3900;
	}
	if (UnitCfg.DisinfictionTime == 16) {
		phaseTime = 4200;
	}
	if (UnitCfg.DisinfictionTime == 17) {
		phaseTime = 4500;
	}
	if (UnitCfg.DisinfictionTime == 18) {
		phaseTime = 4800;
	}
	if (UnitCfg.DisinfictionTime == 19) {
		phaseTime = 5100;
	}
	if (UnitCfg.DisinfictionTime == 20) {
		phaseTime = 5400;
	}
	if (UnitCfg.DisinfictionTime == 21) {
		phaseTime = 5700;
	}
	if (UnitCfg.DisinfictionTime == 22) {
		phaseTime = 6000;
	}
	if (UnitCfg.DisinfictionTime == 23) {
		phaseTime = 6300;
	}
	if (UnitCfg.DisinfictionTime == 24) {
		phaseTime = 6600;
	}
	if (UnitCfg.DisinfictionTime == 25) {
		phaseTime = 6900;
	}
	if (UnitCfg.DisinfictionTime == 26) {
		phaseTime = 7200;
	}
}

void AlertTime() {
	if (UnitCfg.ActivationTime == 0) {
		phaseTime = 10;
	}
	if (UnitCfg.ActivationTime == 1) {
		phaseTime = 20;
	}
	if (UnitCfg.ActivationTime == 2) {
		phaseTime = 30;
	}
	if (UnitCfg.ActivationTime == 3) {
		phaseTime = 40;
	}
	if (UnitCfg.ActivationTime == 4) {
		phaseTime = 50;
	}
	if (UnitCfg.ActivationTime == 5) {
		phaseTime = 60;
	}
	if (UnitCfg.ActivationTime == 6) {
		phaseTime = 70;
	}
	if (UnitCfg.ActivationTime == 7) {
		phaseTime = 80;
	}
	if (UnitCfg.ActivationTime == 8) {
		phaseTime = 90;
	}
	if (UnitCfg.ActivationTime == 9) {
		phaseTime = 100;
	}
	if (UnitCfg.ActivationTime == 10) {
		phaseTime = 110;
	}
	if (UnitCfg.ActivationTime == 11) {
		phaseTime = 120;
	}
}

int set_relay_state(int relay, uint32_t level) {
	if ((relay >= 0) && (relay < 4)) {
		gpio_set_level(cntrl_pins[relay], level);
		cntrl_states[relay] = level;
	} else {

		return 0;
	}
	return 1;
}

void generate_json() {
	int i;
	char buf[4];
	cJSON *root, *info, *relays;
	root = cJSON_CreateObject();
	struct timeval now;
	gettimeofday(&now, NULL);

	cJSON_AddItemToObject(root, "info", info = cJSON_CreateObject());
	cJSON_AddItemToObject(root, "relays", relays = cJSON_CreateObject());

	cJSON_AddStringToObject(info, "ssid", "dummy");
	cJSON_AddNumberToObject(info, "heap", esp_get_free_heap_size());
	cJSON_AddStringToObject(info, "sdk", esp_get_idf_version());
	cJSON_AddNumberToObject(info, "time", (now.tv_sec * 1000000 + now.tv_usec));

	for (i = 0; i < 4; i++) {
		sprintf(buf, "RELAY%d", i); // Relay name.
		cJSON_AddNumberToObject(relays, buf, cntrl_states[i]);
	}

	while (1) {
		gettimeofday(&now, NULL);
		cJSON_ReplaceItemInObject(info, "heap",
				cJSON_CreateNumber(esp_get_free_heap_size()));
		cJSON_ReplaceItemInObject(info, "time",
				cJSON_CreateNumber((now.tv_sec * 1000000 + now.tv_usec)));
		cJSON_ReplaceItemInObject(info, "sdk",
				cJSON_CreateString(esp_get_idf_version()));

		for (i = 0; i < 4; i++) {
			sprintf(buf, "RELAY%d", i); // Relay name.
			cJSON_ReplaceItemInObject(relays, buf,
					cJSON_CreateNumber(cntrl_states[i]));
		}

		json_unformatted = cJSON_PrintUnformatted(root);
		printf("[len = %d]	", strlen(json_unformatted));

		for (int var = 0; var < strlen(json_unformatted); ++var) {
			putc(json_unformatted[var], stdout);
		}

		printf("\n");
		fflush(stdout);
		delay(2000);
		free(json_unformatted);
	}
}

void redRelayAlert() {
	ESP_LOGI(GPIO_TAG, "Red light on !");
	set_relay_state(RedLightRelay, RelayStateON);
	delay(500);
	set_relay_state(RedLightRelay, RelayStateOFF);
	delay(500);
	vTaskDelete(NULL);
}

void buzzerRelayAlert() {
	ESP_LOGI(GPIO_TAG, "Buzzzer on !");
	set_relay_state(BuzzerRelay, RelayStateON);
	delay(500);
	set_relay_state(BuzzerRelay, RelayStateOFF);
	delay(2000);
	vTaskDelete(NULL);
}
void StopUVTreatement() {
	phaseTimeStep = 3500;
	phaseTime = 5;
	phaseTime *= 1000;
	while (phaseTime > 0) {
		ESP_LOGI(GPIO_TAG, "%d !",phaseTime);
		xTaskCreate(&redRelayAlert, "redRelayAlert", 512, NULL, 5,
		NULL);
		xTaskCreate(&buzzerRelayAlert, "buzzerRelayAlert", 512, NULL, 5,
		NULL);
		phaseTime -= phaseTimeStep;
		delay(phaseTimeStep);
	}
	set_relay_state(RedLightRelay, RelayStateON);
	detectionTriggered = false;
}

void UVCTreatement() {
	ESP_LOGI(GPIO_TAG, "SETTING the safety treatement !");
	AlertTime();
	phaseTimeStep = 3500;
	phaseTime *= 1000;
	while (phaseTime > 0) {
		ESP_LOGI(GPIO_TAG, "%d !",phaseTime);
		phaseTime -= phaseTimeStep;
		delay(phaseTimeStep);
		if (stopIsPressed) {
			stopIsPressed = false;
			break;
		}
	}
	if (stopIsPressed) {
		stopIsPressed = false;
		vTaskDelete(NULL);
	}
	ESP_LOGI(GPIO_TAG, "CHECKING the PIR Sensor !");
	uvcTreatementIsON = true;
	if (detectionTriggered) {
		StopUVTreatement();
		vTaskDelete(NULL);
	} else {
		TreatementTime();
		phaseTimeStep = 50;
		phaseTime *= 1000;
		ESP_LOGI(GPIO_TAG, "SETTING the UVC treatement !");
		while (phaseTime > 0) {
			if (detectionTriggered) {
				StopUVTreatement();
				break;
			} else {
				set_relay_state(UVRelay, RelayStateON);
			}
			phaseTime -= phaseTimeStep;
			delay(phaseTimeStep);
			if (stopIsPressed) {
				stopIsPressed = false;
				break;
			}
		}
	}

	vTaskDelete(NULL);
}

uint8_t strContains(char* string, char* toFind) {
	uint8_t slen = strlen(string);
	uint8_t tFlen = strlen(toFind);
	uint8_t found = 0;

	if (slen >= tFlen) {
		for (uint8_t s = 0, t = 0; s < slen; s++) {
			do {

				if (string[s] == toFind[t]) {
					if (++found == tFlen)
						return 1;
					s++;
					t++;
				} else {
					s -= found;
					found = 0;
					t = 0;
				}

			} while (found);
		}
		return 0;
	} else
		return -1;
}

void LedStatusTask() {

	detectionTriggered = false;
	stopIsPressed = false;

	xTaskCreate(&redRelayAlert, "redRelayAlert", 2048, NULL, 5,
	NULL);
	xTaskCreate(&buzzerRelayAlert, "buzzerRelayAlert", 2048, NULL, 5,
	NULL);

	// initialize the gpio
	int i;

	for (i = 0; i < 4; i++) {
		gpio_pad_select_gpio(cntrl_pins[i]);
		gpio_set_direction(cntrl_pins[i], GPIO_MODE_OUTPUT);
		// setting all relay OFF
		gpio_set_level(cntrl_pins[i], 0);
		cntrl_states[i] = 0;
	}

	gpio_pad_select_gpio(PIR_GPIO);
	gpio_set_direction(PIR_GPIO, GPIO_MODE_INPUT);

	set_relay_state(GreenLightRelay, RelayStateON);

	while (1) {
		if ((gpio_get_level(GPIO_NUM_16) == 1) && (uvcTreatementIsON)) {
			detectionTriggered = true;
			ESP_LOGI(GPIO_TAG, "STOP UVC TREATEMENT, WE HAVE DETECTION !");
		}
		delay(50);
	}
}

void LedStatInit() {
	//generate json string
	xTaskCreate(&generate_json, "json", 2048, NULL, 5, NULL);
	//Led and relay task
	xTaskCreate(&LedStatusTask, "LedStatusTask",
	configMINIMAL_STACK_SIZE * 3, NULL, 1, NULL);
}

